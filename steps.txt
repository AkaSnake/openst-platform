STEPS

1) export variables from open_st_env_vars.sh after reviewing the values
    - set following env constants (Mandatory Steps for Staging and Production)
        - OST_VALUE_CHAIN_ID
        - OST_UTILITY_CHAIN_ID
        - OST_VALUE_DEPLOYER_ADDR (create and fund deployers on both chains)
        - OST_VALUE_DEPLOYER_PASSPHRASE
        - OST_UTILITY_DEPLOYER_ADDR
        - OST_UTILITY_DEPLOYER_PASSPHRASE
        - OST_VALUE_REGISTRAR_ADDR (create and fund registrar/intercom on both chains)
        - OST_UTILITY_REGISTRAR_ADDR (create and fund registrar/intercom on both chains)
        - OST_VALUE_REGISTRAR_PASSPHRASE
        - OST_UTILITY_REGISTRAR_PASSPHRASE
        - OST_UTILITY_CHAIN_OWNER_ADDR
        - OST_SIMPLE_TOKEN_CONTRACT_ADDR
        - OST_VALUE_OPS_ADDR

    export OST_GETH_VALUE_RPC_PROVIDER='http://localhost:8545'
    export OST_GETH_VALUE_WS_PROVIDER='ws://localhost:18545'

    export OST_GETH_UTILITY_RPC_PROVIDER='http://localhost:9546'
    export OST_GETH_UTILITY_WS_PROVIDER='ws://localhost:19546'

    export OST_VALUE_CHAIN_ID=2001
    export OST_UTILITY_CHAIN_ID=2000

    export OST_FOUNDATION_ADDR=''

    export OST_VALUE_DEPLOYER_ADDR=''
    export OST_VALUE_DEPLOYER_PASSPHRASE='testtest'

    export OST_UTILITY_CHAIN_OWNER_ADDR=''

    export OST_VALUE_REGISTRAR_ADDR=''
    export OST_VALUE_REGISTRAR_PASSPHRASE='testtest'

    export OST_UTILITY_REGISTRAR_ADDR=''
    export OST_UTILITY_REGISTRAR_PASSPHRASE='testtest'

    export OST_MANAGED_KEY_PASSPHRASE='testtest'

    export OST_SIMPLE_TOKEN_CONTRACT_ADDR=''
    export OST_OPENSTVALUE_CONTRACT_ADDR=''
    export OST_OPENSTUTILITY_CONTRACT_ADDR=''
    export OST_STPRIME_CONTRACT_ADDR=''
    export OST_VALUE_CORE_CONTRACT_ADDR=''
    export OST_VALUE_REGISTRAR_CONTRACT_ADDR=''
    export OST_UTILITY_REGISTRAR_CONTRACT_ADDR=''

    export OST_STAKING_CONTRACT_ADDR=''
    export OST_UTILITY_TOKEN_CONTRACT_ADDR=''

    export OST_UTILITY_STPRIME_TOTAL_SUPPLY=800000000

2)  On Development Only
    - rm -r test/st-poa-*
    - source test/open_st_env_vars.sh
    - cd test
    - ./init_keys.sh

3) On Development only
    - Verify genesis file configurations test/poa-genesis-value.json
    - Open a new Terminal and Run
    - cd test
    - ./run_value_chain.sh

4) On Development only
   - Verify genesis file configurations test/poa-genesis-utility.json
   - Open a New Terminal
   - cd test
   - ./run_utility_chain.sh

5) On development only in value chain machine
   - source test/open_st_env_vars.sh
   - node test/deployAndFinalizeSimpleTokenContract.js

6) deploy contracts on value Chain
    - source test/open_st_env_vars.sh
    - node tools/deploy/openst_value.js

7) On Utility Chain Machine
    - source test/open_st_env_vars.sh
    - on staging/production in poa-genesis-utility.json alloc 800M base tokens to machine key(deployer)
    - Verify if OST_DEPLOYER_UTILITY_ADDR has exactly 800M balance on utility chain
    - node tools/deploy/openst_utility.js

8) On Value Chain Machine
    - source test/open_st_env_vars.sh
    - node tools/deploy/register_utility_token_value.js

9) Start Inter Comm on the foundation machine.
    - source test/open_st_env_vars.sh
    - node services/inter_comm/stake_and_mint.js


10) Create member company. In new terminal (node_terminal)
    //.. You need to reuse this node console terminal again.
    //.. We will refer this terminal as node_terminal in further steps.

    source test/open_st_env_vars.sh
    node
        const rootPrefix = '.';
        const initKlass = require('./tools/init_utility_token');
        const initKlassObj = new initKlass;

        var btSymbol = 'ACME';
        var btName = 'ACMECoin';
        var btConversion = 10;
        var apiAuthUser = "acme";
        var apiAuthSecret = "acmesecret";
        var apiCallbackUrl = null;
        var newMemberInfo = initKlassObj.newManagedMember(btSymbol, btName, apiAuthUser, apiAuthSecret, apiCallbackUrl);
        var memberAddress = newMemberInfo.address; //<-- This is MANAGED_MEMBER_ADDRESS for next steps.
        var memberPassphrase = newMemberInfo.passphrase;

    //...DO NOT CLOSE THIS TERMINAL. OR at-least copy the logs for refrence.

11) Copy Member keyfile to Value Chain Geth Node :: To Be Discussed
    Member keyfile is generated in UtilityChain geth node.

12) Grant for member company. In new Terminal.

    // Shortcut for Development: node test/fundMember.js [MANAGED_MEMBER_ADDRESS from step 9]

    //.. Foundation to grant ST to MANAGED_MEMBER_ADDRESS.

    //.. SOMEONE needs to fund MANAGED_MEMBER_ADDRESS with ETH on valueChain. 


13) stake and mint process. To Get STPrime.
    //.. MANAGED_MEMBER_ADDRESS to Stake ST and get STPrime with member company as benificary.
    - source test/open_st_env_vars.sh
    - node tools/stake_and_mint/for_st_prime.js


14) In node_terminal (Opened in step 10.)
    
    initKlassObj.propose(memberAddress, btSymbol, btName, btConversion);

    //..INCASE YOU CLOSED node_terminal
    //.... You will need member company address (Can be found in config)
    //.... You will need member company passphrase. (Not in 0.9.1)


    source test/open_st_env_vars.sh
    node
        const rootPrefix = '.';
        const initKlass = require('./tools/init_utility_token');
        const initKlassObj = new initKlass;

        var memberAddress = MANAGED_MEMBER_ADDRESS; //<-- Need TO EDIT THIS
        var btSymbol = 'ACME';
        var btName = 'ACMECoin';
        var btConversion = 10;
        initKlassObj.propose(memberAddress, btSymbol, btName, btConversion);

15) stake and mint process to get BrandedToken
    - source test/open_st_env_vars.sh
    - node tools/stake_and_mint/for_branded_token.js
