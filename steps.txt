STEPS

1) export variables from open_st_env_vars.sh after reviewing the values
    - set following env constants (Mandatory Steps for Staging and Production)
        - OST_VALUE_CHAIN_ID
        - OST_UTILITY_CHAIN_ID
        - OST_DEPLOYER_ADDR (create and fund deployers on both chains)
        - OST_DEPLOYER_PASSPHRASE
        - OST_VALUE_REGISTRAR_ADDR (create and fund registrar/intercom on both chains)
        - OST_UTILITY_REGISTRAR_ADDR (create and fund registrar/intercom on both chains)
        - OST_VALUE_REGISTRAR_PASSPHRASE
        - OST_UTILITY_REGISTRAR_PASSPHRASE
        - OST_UTILITY_CHAIN_OWNER_ADDR
        - OST_SIMPLE_TOKEN_CONTRACT_ADDR
        - OST_VALUE_OPS_ADDR

    export OST_GETH_VALUE_RPC_PROVIDER='http://localhost:8545'
    export OST_GETH_VALUE_WS_PROVIDER='ws://localhost:18545'

    export OST_GETH_UTILITY_RPC_PROVIDER='http://localhost:9546'
    export OST_GETH_UTILITY_WS_PROVIDER='ws://localhost:19546'

    export OST_VALUE_CHAIN_ID=2001
    export OST_UTILITY_CHAIN_ID=2000

    export OST_FOUNDATION_ADDR=''

    export OST_DEPLOYER_ADDR=''
    export OST_DEPLOYER_PASSPHRASE='testtest'

    export OST_UTILITY_CHAIN_OWNER_ADDR=''

    export OST_VALUE_REGISTRAR_ADDR=''
    export OST_VALUE_REGISTRAR_PASSPHRASE='testtest'

    export OST_UTILITY_REGISTRAR_ADDR=''
    export OST_UTILITY_REGISTRAR_PASSPHRASE='testtest'

    export OST_SIMPLE_TOKEN_CONTRACT_ADDR=''
    export OST_OPENSTVALUE_CONTRACT_ADDR=''
    export OST_OPENSTUTILITY_CONTRACT_ADDR=''
    export OST_STPRIME_CONTRACT_ADDR=''
    export OST_VALUE_CORE_CONTRACT_ADDR=''
    export OST_VALUE_REGISTRAR_CONTRACT_ADDR=''
    export OST_UTILITY_REGISTRAR_CONTRACT_ADDR=''

    export OST_STAKING_CONTRACT_ADDR=''
    export OST_UTILITY_TOKEN_CONTRACT_ADDR=''

    export OST_DEPLOYER_ADDR=''
    export OST_DEPLOYER_PASSPHRASE='testtest'

    export OST_UTILITY_STPRIME_TOTAL_SUPPLY=800000000

2) cd test
    ./init_keys.sh

3) On Development only
    - Verify genesis file configurations test/poa-genesis-value.json
    - Open a new Terminal and Run
    - cd test
    - ./run_value_chain.sh

4) Verify test/poa-genesis-utility.json
   - Open a New Terminal
   - cd test
   - ./run_utility_chain.sh

5) On development only
   - On value chain machine
   - source test/open_st_env_vars.sh
   - node test/deployOpenSTOnTestNetNew.js

6) deploy contracts on value Chain
    - source test/open_st_env_vars.sh
    - node tools/deploy/openst_value.js

7) To avoid deployment of same contract addresses On Utility Chain Machine
    - Create a new OST_DEPLOYER_ADDR and fund it 800 Million manually with sufficient ETH
    - Use below code for funding to OST_DEPLOYER_ADDR
        var sender = '';
        var receiver = ''
        personal.unlockAccount(sender)
        eth.sendTransaction({from: sender, to: receiver, value: web3.toWei(800000000, "ether")})

8) On Utility Chain Machine
    - on staging/production in poa-genesis-utility.json alloc 800M base tokens to machine key(deployer)
    - Restart Utility Chain
       ./run_utility_chain.sh
    - Verify if OST_DEPLOYER_ADDR has exactly 800M balance on utility chain
    - source test/open_st_env_vars.sh
    - node tools/deploy/openst_utility.js

9) On Value Chain Machine
    - source test/open_st_env_vars.sh
    - node tools/deploy/register_utility_token_value.js

10) In new terminal
    source test/open_st_env_vars.sh
    node
    (function () {
        const rootPrefix = '.';
        const coreAddresses = require(rootPrefix+'/config/core_addresses');
        const initKlass = require('./tools/init_utility_token');
        const initKlassObj = new initKlass;
        var btSymbol = 'XYZsdasdas';
        var btName = 'xyzCosadasin';
        var btConversion = 10;

        initKlassObj.propose(coreAddresses.getAddressForUser('foundation'), coreAddresses.getPassphraseForUser('foundation'), btSymbol, btName, btConversion);
    })();

11) Start Inter Comm on the foundation machine.
    - source test/open_st_env_vars.sh
    - node services/inter_comm/stake_and_mint.js


